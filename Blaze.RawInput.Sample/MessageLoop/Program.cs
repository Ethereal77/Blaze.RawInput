// Copyright © 2020 Infinisis

using System;
using System.Drawing;
using System.Windows.Forms;

using static System.Console;

namespace Blaze.Framework.RawInput.Sample
{
    /// <summary>
    ///   Program to show how to use RawInput.
    /// </summary>
    static class Program
    {
        /// <summary>
        ///   Main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            var form = CreateWindow();

            // Show info/instructions about this sample
            ShowInfo();

            // Information about the available devices
            ListDevices();

            // Setup the devices
            RegisterMouse(DeviceFlags.InputSink | DeviceFlags.DeviceNotify, form.Handle);
            RegisterKeyboard(DeviceFlags.None);

            // Listen to device changes
            RawInput.DeviceChanged += OnDeviceChanged;

            WriteLine();

            RawInput.StartProcessingMessages(form.Handle);
            Application.Run(form);
            RawInput.StopProcessingMessages();
        }

        private static void ShowInfo()
        {
            var fg = ForegroundColor;
            ForegroundColor = ConsoleColor.White;
            WriteLine("RawInput, Message-based Input Processing sample");
            WriteLine("===============================================");
            WriteLine();
            WriteLine("This sample shows the received raw input events as they are received by the");
            WriteLine("window message loop.");
            WriteLine();
            WriteLine("Close the window to end the sample.");
            WriteLine();
            ForegroundColor = fg;
        }

        private static Form CreateWindow()
        {
            var form = new Form
            {
                Width = 300,
                Height = 200,

                Top = 10,
                Left = 10,

                Text = "Blaze RawInput sample",

                FormBorderStyle = FormBorderStyle.FixedSingle,
                MaximizeBox = false,
                MinimizeBox = false
            };

            var label = new Label
            {
                Dock = DockStyle.Fill,
                TextAlign = ContentAlignment.MiddleCenter,
                AutoSize = false,
                Text = @"This is the window that will register itself to receive RawInput events.

Move the mouse, press kays on the keyboard or use a gamepad to view a log of the events generated by your actions."
            };
            form.Controls.Add(label);
            form.Visible = true;

            return form;
        }

        private static void ListDevices()
        {
            var fg = ForegroundColor;
            ForegroundColor = ConsoleColor.Yellow;

            foreach (var device in RawInput.Devices)
            {
                PrintDevice(device);
                WriteLine();
            }

            ForegroundColor = fg;
        }

        private static void PrintDevice(DeviceInfo device)
        {
            WriteLine($"Device: 0x{device.Handle.ToString("X")} Type: {device.Type} Name: {device.Name}");
            WriteLine(device switch
            {
                KeyboardInfo kbd => $"  Total keys: {kbd.TotalKeyCount}, Function Keys: {kbd.FunctionKeyCount}, Indicators: {kbd.IndicatorCount}, " +
                                    $"Type: {kbd.KeyboardType:x}-{kbd.Subtype:x}, Mode: {kbd.KeyboardMode:x}",

                MouseInfo mouse => $"  Id: {mouse.Id:x}, Buttons: {mouse.ButtonCount}, Sample rate: {mouse.SampleRate}, HWheel: {mouse.HasHorizontalWheel}",

                HidInfo hid => $"  Vendor: {hid.VendorId:x}, Product: {hid.ProductId:x}, Version: {hid.VersionNumber}, Usage page: {hid.UsagePage}, Usage: {hid.Usage}",

                _ => ""
            });
        }

        private static void RegisterMouse(DeviceFlags deviceFlags, IntPtr windowHandle = default)
        {
            var fg = ForegroundColor;
            ForegroundColor = ConsoleColor.Green;

            WriteLine($"Registering mouse devices with flags [{deviceFlags}].");

            ForegroundColor = fg;

            RawInput.RegisterDevice(UsagePage.Generic, UsageId.GenericMouse, deviceFlags, windowHandle);
            RawInput.MouseInput += OnMouseInput;
        }

        private static void RegisterKeyboard(DeviceFlags deviceFlags, IntPtr windowHandle = default)
        {
            var fg = ForegroundColor;
            ForegroundColor = ConsoleColor.Green;

            WriteLine($"Registering keyboard devices with flags [{deviceFlags}].");

            ForegroundColor = fg;

            RawInput.RegisterDevice(UsagePage.Generic, UsageId.GenericKeyboard, deviceFlags, windowHandle);
            RawInput.KeyboardInput += OnKeyboardInput;
        }

        private static void OnKeyboardInput(IntPtr device, IntPtr hwnd, in KeyboardInputEventArgs args)
        {
            var fg = ForegroundColor;
            ForegroundColor = ConsoleColor.DarkGray;
            Write($"Window 0x{hwnd.ToString("X")}, Device 0x{device.ToString("X")}, Mode: {args.InputMode}: ");
            ForegroundColor = ConsoleColor.Gray;
            WriteLine($"Key: {args.Key}, Make code: {args.MakeCode}, State: {args.State}, ScanCodeFlags: {args.ScanCodeFlags}");
            ForegroundColor = fg;
        }

        private static void OnMouseInput(IntPtr device, IntPtr hwnd, in MouseInputEventArgs args)
        {
            var fg = ForegroundColor;
            ForegroundColor = ConsoleColor.DarkGray;
            Write($"Window 0x{hwnd.ToString("X")}, Device 0x{device.ToString("X")}, Mode: {args.InputMode}: ");
            ForegroundColor = ConsoleColor.Gray;
            WriteLine($"(X:{args.X}, Y:{args.Y}), State: {args.Mode}, Buttons: {args.Buttons:x} {args.ButtonFlags}, Wheel: {args.WheelDelta}");
            ForegroundColor = fg;
        }

        private static void OnDeviceChanged(IntPtr device, DeviceChange change)
        {
            var fg = ForegroundColor;
            ForegroundColor = ConsoleColor.Cyan;

            WriteLine(change switch
            {
                DeviceChange.Arrival => $"The device 0x{device.ToString("X")} has been added to the system." + Environment.NewLine +
                                        "  " + RawInput.Devices[device] switch
                                               {
                                                   KeyboardInfo kb => "Keyboard " + kb.Name,
                                                   MouseInfo m => "Mouse " + m.Name,
                                                   HidInfo hid => "HID " + hid.Name,
                                                   _ => "Unkown device type!"
                                               },

                DeviceChange.Removal => $"The device 0x{device.ToString("X")} has been removed from the system.",

                _ => "Unknown device change notification!"
            });

            ForegroundColor = fg;
        }
    }
}
